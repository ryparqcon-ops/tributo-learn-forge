# üß† CURSOR RULES - TRIBUTO LEARN FORGE

## üìö CONTEXTO DEL PROYECTO

**Tributo Learn Forge** es una plataforma de educaci√≥n tributaria especializada en el sistema fiscal peruano. Conecta estudiantes con instructores especializados para aprender sobre tributaci√≥n, contabilidad fiscal y normativas tributarias del Per√∫.

## üèóÔ∏è ARQUITECTURA CLAVE

### Stack Tecnol√≥gico
- **Frontend**: React 18 + TypeScript + Vite + Tailwind CSS + shadcn/ui
- **Backend**: Supabase (PostgreSQL + Auth + Storage)
- **Estado**: Zustand (global) + React Query (servidor)
- **Routing**: React Router v6
- **Formularios**: React Hook Form + Zod

### Patrones de C√≥digo
- **Componentes**: Functional components con hooks
- **Estado**: Hooks personalizados para datos del servidor
- **Servicios**: Clases para encapsular l√≥gica de datos
- **Tipos**: TypeScript generado desde Supabase + interfaces personalizadas

## üéØ REGLAS DE DESARROLLO

### Estructura de Archivos
```
src/
‚îú‚îÄ‚îÄ components/ui/          # Componentes base (shadcn/ui)
‚îú‚îÄ‚îÄ components/course/      # Componentes espec√≠ficos de cursos
‚îú‚îÄ‚îÄ components/instructor/  # Componentes espec√≠ficos de instructores
‚îú‚îÄ‚îÄ hooks/                  # Hooks personalizados
‚îú‚îÄ‚îÄ lib/services/          # Servicios de datos
‚îú‚îÄ‚îÄ lib/types/             # Tipos TypeScript
‚îî‚îÄ‚îÄ pages/                 # P√°ginas de la aplicaci√≥n
```

### Convenciones de Naming
- **Componentes**: PascalCase (CourseCard, InstructorProfile)
- **Hooks**: camelCase con prefijo "use" (useCourses, useInstructors)
- **Servicios**: camelCase con sufijo "Service" (coursesService, instructorsService)
- **Tipos**: PascalCase (Course, Instructor, User)
- **Archivos**: kebab-case (course-card.tsx, instructor-profile.tsx)

### Patrones de Componentes
```typescript
// Patr√≥n de componente con props tipadas
interface CourseCardProps {
  course: Course
  onEnroll?: (courseId: string) => void
  variant?: 'default' | 'preview'
}

export const CourseCard: React.FC<CourseCardProps> = ({ 
  course, 
  onEnroll, 
  variant = 'default' 
}) => {
  // Implementaci√≥n
}
```

### Patrones de Hooks
```typescript
// Patr√≥n de hook con React Query
export const useCourses = () => {
  return useQuery({
    queryKey: ['courses'],
    queryFn: coursesService.getCourses,
    staleTime: 1000 * 60 * 5, // 5 minutos
  })
}
```

## üîß CONFIGURACI√ìN T√âCNICA

### Supabase
- **Cliente**: Configurado en `src/lib/supabase.ts`
- **Tipos**: Generados en `src/lib/types/supabase.ts`
- **RLS**: Habilitado con pol√≠ticas por rol
- **Roles**: student, instructor, admin, staff

### Estado Global
- **Zustand**: Para estado de UI (theme, auth, modals)
- **React Query**: Para estado del servidor (cursos, instructores)
- **Local State**: Para estado espec√≠fico de componentes

### Styling
- **Tailwind CSS**: Utility-first approach
- **shadcn/ui**: Componentes base accesibles
- **Tema**: Claro/oscuro con next-themes
- **Responsive**: Mobile-first design

## üéØ FUNCIONALIDADES IMPLEMENTADAS

### ‚úÖ Completadas
- Sistema de autenticaci√≥n con roles
- Base de datos completa con RLS
- Componentes UI base (shadcn/ui)
- Sistema de routing
- P√°ginas principales (Courses, Instructors, etc.)
- Sistema de b√∫squeda
- Dashboard b√°sico

### üîÑ En Desarrollo
- Sistema de inscripciones a cursos
- Dashboard de usuario completo
- Sistema de progreso de lecciones
- Sistema de rese√±as y calificaciones

### ‚è≥ Planificadas
- Sistema de pagos
- Asesor√≠as en tiempo real
- Notificaciones push
- Certificados digitales

## üö® CONSIDERACIONES IMPORTANTES

### Seguridad
- **Siempre validar datos** con Zod
- **Usar RLS** para protecci√≥n de datos
- **No exponer claves** en el frontend
- **Validar permisos** antes de operaciones

### Performance
- **Lazy loading** para rutas
- **React Query** para cach√© de datos
- **Optimizar im√°genes** antes de subir
- **Minimizar re-renders** con useMemo/useCallback

### UX/UI
- **Loading states** en todas las operaciones async
- **Error boundaries** para manejo de errores
- **Responsive design** para m√≥viles
- **Accesibilidad** con ARIA labels

### C√≥digo
- **TypeScript estricto** siempre
- **Componentes reutilizables** cuando sea posible
- **Hooks personalizados** para l√≥gica compleja
- **Documentar** funciones complejas

## üîÑ FLUJO DE DESARROLLO

### Antes de Codificar
1. Leer Memory Bank completo
2. Entender el contexto del proyecto
3. Revisar patrones existentes
4. Planificar la implementaci√≥n

### Durante el Desarrollo
1. Seguir convenciones establecidas
2. Usar TypeScript estricto
3. Implementar loading states
4. Manejar errores apropiadamente

### Despu√©s del Desarrollo
1. Probar la funcionalidad
2. Verificar responsive design
3. Actualizar Memory Bank si es necesario
4. Documentar cambios importantes

## üìä M√âTRICAS DE CALIDAD

### C√≥digo
- 100% TypeScript
- Sin errores de ESLint
- Componentes < 200 l√≠neas
- Funciones < 50 l√≠neas

### UX
- Tiempo de carga < 3 segundos
- Responsive en m√≥viles
- Accesible con teclado
- Loading states visibles

### Funcionalidad
- Manejo de errores robusto
- Validaci√≥n de formularios
- Estados de carga consistentes
- Navegaci√≥n intuitiva

---

**√öltima actualizaci√≥n**: Diciembre 2024  
**Versi√≥n**: 1.0.0  
**Estado**: Desarrollo Activo
